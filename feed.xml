<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jooheekim0713.github.io/</id><title>joohee Kim</title><subtitle>upload what i learned. usually javascript, typescript and others.</subtitle> <updated>2022-09-13T20:30:49+09:00</updated> <author> <name>joohee Kim</name> <uri>https://jooheekim0713.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jooheekim0713.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://jooheekim0713.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 joohee Kim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[Typescript] 타입스크립트 도입 시작</title><link href="https://jooheekim0713.github.io/posts/typescript101_part1/" rel="alternate" type="text/html" title="[Typescript] 타입스크립트 도입 시작" /><published>2022-09-13T16:56:00+09:00</published> <updated>2022-09-13T20:30:19+09:00</updated> <id>https://jooheekim0713.github.io/posts/typescript101_part1/</id> <content src="https://jooheekim0713.github.io/posts/typescript101_part1/" /> <author> <name>joohee Kim</name> </author> <category term="Typescript" /> <summary> 타입스크립트를 배우게된 이유 자바스크립트로 코드를 짜면서 런타임 에러를 너무나 자주 만나게 됐다. 있어서는 안되는 입력되는 데이터 형식의 오류를 막을 수 있다. JS는 동적타입언어고 TS는 JS에 타입이 정해진 superset으로 정적타입언어로 컴파일시 타입에러를 잡을 수 있다. 타입스크립트를 사용해야하는 이유 위에서 말했던 바와 같이 정적타입언어이기 때문에 컴파일시 타입 에러를 잡을 수 있다. 개발 하는 도중에 에러에 대한 확인을 받을 수 있기 때문에 앱을 실행하면서 발생하는 오류를 줄이고 자신감을 얻을 수 있다. 또한 타입스크립트에서 자체 제공하는 컴파일러나 Babel로 타입스크립트 코드를 transcompile해서 자바스크립트 코드로 변환시켜주기때문에 자바스크립트가 사용되... </summary> </entry> <entry><title>[Test] part.2 Jest</title><link href="https://jooheekim0713.github.io/posts/test_part2/" rel="alternate" type="text/html" title="[Test] part.2 Jest" /><published>2022-09-04T21:00:00+09:00</published> <updated>2022-09-08T15:12:26+09:00</updated> <id>https://jooheekim0713.github.io/posts/test_part2/</id> <content src="https://jooheekim0713.github.io/posts/test_part2/" /> <author> <name>joohee Kim</name> </author> <category term="Test" /> <summary> 테스트 피라미드 3단계의 가장 밑바탕이되는 unit test를 먼저 시작한다. Jest 자바스크립트에서 주로 사용되는 테스트 라이브러리이다. create-react-app으로 react 프로젝트를 생성시 함께 설치되는 라이브러리이기 때문에 React 환경의 테스트를 앞서서 vailla javascript를 Jest로 테스트한다. Jest 환경설정 Jest는 javascript 환경에서 사용해야하기 때문에 node js을 사용할 수 있도록 npm 환경을 설정한다. npm init --yes npm 환경설정이 완료되면 package.json파일이 생성되고 Jest 를 설치한다. npm install jest -... </summary> </entry> <entry><title>[Test] part.1 Test Pyramid</title><link href="https://jooheekim0713.github.io/posts/test_part1/" rel="alternate" type="text/html" title="[Test] part.1 Test Pyramid" /><published>2022-09-02T11:00:00+09:00</published> <updated>2022-09-05T18:22:18+09:00</updated> <id>https://jooheekim0713.github.io/posts/test_part1/</id> <content src="https://jooheekim0713.github.io/posts/test_part1/" /> <author> <name>joohee Kim</name> </author> <category term="test" /> <summary> 많은 프로젝트에서 TDD를 도입하고 있고, JD에도 TDD 주도 개발을 경험해본 인재를 찾기에 테스트 주도 개발이란 무엇인지 궁금해졌다. 궁금한건 못참기 때문에 역시나 궁금증을 풀기위해 테스트에 발을 담가보았다. 그리고 이번 기회에 아직 테스트를 실전 프로젝트에서 사용해보지 못해 부족한 부분도 많겠지만 드디어 테스트에 대한 개념정리와 테스트를 해야하는 이유, 테스트의 종류와 테스트를 진행할 때 사용하는 라이브러리의 사용법을 배웠기 때문에 잊기 전에 정리해본다. 테스트를 해야하는 이유 테스트 코드는 기능 코드를 구현하기 전에 먼저 작성한다. 따라서 테스트 코드를 작성하면서 기능 구현 전에 발생할 수 있는 버그를 먼저 확인하고 기능 코드를 작성해 버그를 줄일 수 있다. 테스트 코드를 작성하... </summary> </entry> <entry><title>[React] PureComponent, memo</title><link href="https://jooheekim0713.github.io/posts/react_performance_optimization/" rel="alternate" type="text/html" title="[React] PureComponent, memo" /><published>2022-08-31T11:00:00+09:00</published> <updated>2022-09-05T18:22:18+09:00</updated> <id>https://jooheekim0713.github.io/posts/react_performance_optimization/</id> <content src="https://jooheekim0713.github.io/posts/react_performance_optimization/" /> <author> <name>joohee Kim</name> </author> <category term="React" /> <summary> React Virtual DOM React는 Component에 관련된 state, props이 변경되는 경우 랜더가 호출된다. state, prop이 변경되면 메모리상에 존재하는 Virtual DOM tree에 이전의 prop과 state로 구현된 tree와 새로 구현된 tree를 비교해서 변경된 부분만 DOM에 업데이트한다. 문제는 변경되지 않은 Component도 랜더링되기도 하는데 변경사항 없는 요소를 다시 읽어오는 것은 메모리를 낭비하며 성능을 저하시킨다. 따라서 이런 변경이 필요하지 않은 Component들의 랜더링을 막기 위한 성능 최적화가 필요하다. React 성능 최적화 React 성능 최적화를 위해서는 class를 사용할때는 Component를 PureCompon... </summary> </entry> <entry><title>[React] useState callback</title><link href="https://jooheekim0713.github.io/posts/react_useState/" rel="alternate" type="text/html" title="[React] useState callback" /><published>2022-08-29T21:40:00+09:00</published> <updated>2022-08-29T21:40:00+09:00</updated> <id>https://jooheekim0713.github.io/posts/react_useState/</id> <content src="https://jooheekim0713.github.io/posts/react_useState/" /> <author> <name>joohee Kim</name> </author> <category term="React" /> <summary> useState callback const createOrUpdate = (card) =&amp;gt; { const updated = { ...cards }; updated[card.id] = card; setCards(updated); }; 기존의 코드는 이렇게 작성되어 있었다. 문제는 원하는 대로 실행되지 않았다는 것이다. 코드 작성의도는 수정된 card의 정보들이 update 변수에 담겨 setCards()함수로 card 의 상태를 업데이트 하는것이 었으나 수정된 사항이 card에 반영이 안됐다. 수정하기 전 state가 자꾸 불러져왔다. 이유는 setCards()함수가 비동기적으로 동작하기 때문이다. 따라서 상태를 동기적으로 업데이트하기 위해서는 useState에서 제공하... </summary> </entry> </feed>
